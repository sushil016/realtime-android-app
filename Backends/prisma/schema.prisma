// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  LATE
  EARLY_DEPARTURE
  ABSENT
}

model User {
  id             Int           @id @default(autoincrement())
  userName       String        @unique
  email          String        @unique
  password       String
  role           UserRole      @default(EMPLOYEE)
  department     String?
  phoneNumber    String?
  collegeName    String?
  organization   String?
  bio            String?
  avatar         String?       // URL to profile picture
  address        String?
  city           String?
  country        String?
  joinedDate     DateTime      @default(now())
  managerId      Int?
  manager        User?         @relation("UserToManager", fields: [managerId], references: [id])
  subordinates   User[]        @relation("UserToManager")
  locationPins   LocationPin[]
  attendances    Attendance[]
  notifications  Notification[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activities    Activity[]
}

model LocationPin {
  id            Int               @id @default(autoincrement())
  userId        Int
  user          User              @relation(fields: [userId], references: [id])
  latitude      Float
  longitude     Float
  radius        Float             @default(200) // in meters
  createdAt     DateTime          @default(now())
  histories     LocationHistory[]
  attendances   Attendance[]
  activities    Activity[]
}

model LocationHistory {
  id            Int         @id @default(autoincrement())
  locationPinId Int
  locationPin   LocationPin @relation(fields: [locationPinId], references: [id])
  timeInside    Int        // stored in seconds
  timeOutside   Int        // stored in seconds
  date          DateTime    @default(now())
}

model Attendance {
  id              Int              @id @default(autoincrement())
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  locationPinId   Int
  locationPin     LocationPin      @relation(fields: [locationPinId], references: [id])
  checkIn         DateTime
  checkOut        DateTime?
  status          AttendanceStatus @default(PRESENT)
  workHours       Float?           // in hours
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activity     Activity?
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  title       String
  message     String
  isRead      Boolean   @default(false)
  type        String    // LATE_ARRIVAL, EARLY_DEPARTURE, LOCATION_ALERT, etc.
  createdAt   DateTime  @default(now())
}

model Settings {
  id                    Int      @id @default(autoincrement())
  workStartTime         String   // HH:mm format
  workEndTime          String   // HH:mm format
  lateThreshold        Int      // minutes
  earlyDepartThreshold Int      // minutes
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Activity {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  timeInZone  Int         @default(0)  // stored in seconds
  timeOutZone Int         @default(0)  // stored in seconds
  isInZone    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attendance  Attendance? @relation(fields: [attendanceId], references: [id])
  attendanceId Int?       @unique
  locationPinId Int
  locationPin LocationPin @relation(fields: [locationPinId], references: [id])

  @@index([userId])
  @@index([createdAt])
}